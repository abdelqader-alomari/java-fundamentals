/*
* This Java source file was generated by the Gradle 'init' task.
*/
package inheritance;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test
    void RestaurantName() {
        Restaurant restaurant = new Restaurant("Mcdonald's", 2, 2);

        assertEquals("Restaurant Name: Mcdonald's Rate: 2.0 Price Category: 2.0$, Review: No review added.",
                restaurant.toString());
    }

    @Test
    void RestaurantReview() {
        Review restaurant = new Review("Abdelqader", 4, "good restaurant");
        assertEquals("Author: Abdelqader, rate: 4, notes: good restaurant", restaurant.toString());
    }

    @Test
    void multiReviews() {
        Restaurant restaurant = new Restaurant("Mcdonald's", 4, 2);
        Review review1 = new Review("Abdelqader", 4, "Good");
        Review review2 = new Review("Jack", 5, "Perfect");
        Review review3 = new Review("Sally", 2, "not delicious as expected");

        restaurant.addReview(review1);
        restaurant.addReview(review2);
        restaurant.addReview(review3);
        assertEquals(
                "[Author: Abdelqader, rate: 4, notes: Good, Author: Jack, rate: 5, notes: Perfect, Author: Sally, rate: 2, notes: not delicious as expected]\n"
                        + "Restaurant Name: Mcdonald's Rate: 3.6666666666666665 Price Category: 2.0$[Author: Abdelqader, rate: 4, notes: Good, Author: Jack, rate: 5, notes: Perfect, Author: Sally, rate: 2, notes: not delicious as expected]",
                restaurant.getReviews().toString() + "\n" + restaurant.toString());
    }

    @Test
    void ShopName() {
        Shop shop = new Shop("Max", 4, 2, "There are a lot of nice collections");

        assertEquals(
                "Shop Name: Max Rate: 4.0 Price Category: 2.0$ Description: There are a lot of nice collections, Review: No review added.",
                shop.toString());
    }

    @Test
    void ShopReview() {
        Review shop = new Review("Jack", 5, "Perfect");
        assertEquals("Author: Jack, rate: 5, notes: Perfect", shop.toString());
    }

    @Test
    void ShopReviews() {
        Shop shop = new Shop("Max", 4, 2, "There are a lot of nice collections");
        Review review1 = new Review("Abdelqader", 4, "Good");
        Review review2 = new Review("Jack", 5, "Perfect");
        Review review3 = new Review("Sally", 2, "not delicious as expected");

        shop.addReview(review1);
        shop.addReview(review2);
        shop.addReview(review3);
        assertEquals(
                "[Author: Abdelqader, rate: 4, notes: Good, Author: Jack, rate: 5, notes: Perfect, Author: Sally, rate: 2, notes: not delicious as expected]\n"
                        + "Shop Name: Max Rate: 3.6666666666666665 Price Category: 2.0$ Description: There are a lot of nice collections[Author: Abdelqader, rate: 4, notes: Good, Author: Jack, rate: 5, notes: Perfect, Author: Sally, rate: 2, notes: not delicious as expected]",
                shop.getReviews().toString() + "\n" + shop.toString());
    }

    @Test
    void TheatreName() {
        Theater theater = new Theater("Taj Cinema", 4.5, 2);

        assertEquals("Theater Name: Taj Cinema, Rate: 4.5, Today's Movies: [], Review: No review added.",
                theater.toString());
    }

    @Test
    void TheatreReview() {
        Review theater = new Review("Jack", 5, "Perfect");
        assertEquals("Author: Jack, rate: 5, notes: Perfect", theater.toString());
    }

    @Test
    void TheatreReviews() {
        Theater theater = new Theater("Taj Cinema", 4.5, 2);
        Review review1 = new Review("Abdelqader", 5, "Nice");
        Review review2 = new Review("Jack", 4, "V.Good");
        Review review3 = new Review("Sally", 2, "I don't like it");

        theater.addReview(review1);
        theater.addReview(review2);
        theater.addReview(review3);
        assertEquals(
                "[Author: Abdelqader, rate: 5, notes: Nice, Author: Jack, rate: 4, notes: V.Good, Author: Sally, rate: 2, notes: I don't like it]\n"
                        + "Theater Name: Taj Cinema, Rate: 3.6666666666666665, Today's Movies: [], Review: [Author: Abdelqader, rate: 5, notes: Nice, Author: Jack, rate: 4, notes: V.Good, Author: Sally, rate: 2, notes: I don't like it]",
                theater.getReviews().toString() + "\n" + theater.toString());
    }

    @Test
    void TheatreAddRemoveMovie() {
        Theater theater = new Theater("Taj Cinema", 4.5, 2);
        theater.addMovie("Mission Impossible");
        theater.addMovie("Mission Impossible");
        theater.addMovie("Mission ImpossibleII");
        theater.addMovie("Titanic");
        theater.addMovie("Mission ImpossibleIII");
        theater.removeMovie("Mission ImpossibleII");
        assertEquals(
                "Theater Name: Taj Cinema, Rate: 4.5, Today's Movies: [Mission Impossible, Titanic, Mission ImpossibleIII], Review: No review added.",
                theater.toString());
    }
}
